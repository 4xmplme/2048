{"mappings":"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","sources":["<anon>","src/scripts/index.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.score = 0;\n        this.status = \"idle\"; // One of: 'idle', 'playing', 'win', 'lose'\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    _spawnNewTile() {\n        const zeroPos = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) zeroPos.push({\n                rowIndex: row,\n                colIndex: col\n            });\n        }\n        if (zeroPos.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * zeroPos.length);\n        const randomCell = zeroPos[randomIndex];\n        const startValue = Math.random() < 0.1 ? 4 : 2;\n        this.board[randomCell.rowIndex][randomCell.colIndex] = startValue;\n    }\n    _processRow(row) {\n        const slidRow = row.filter((cell)=>cell !== 0);\n        const mergedRow = [];\n        for(let i = 0; i < slidRow.length; i++)if (i + 1 < slidRow.length && slidRow[i] === slidRow[i + 1]) {\n            const mergedValue = slidRow[i] * 2;\n            if (mergedValue === 2048) this.status = \"win\";\n            mergedRow.push(mergedValue);\n            this.score += mergedValue;\n            i++;\n        } else mergedRow.push(slidRow[i]);\n        while(mergedRow.length < 4)mergedRow.push(0);\n        return mergedRow;\n    }\n    _transposeBoard() {\n        const newBoard = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        for(let i = 0; i < newBoard.length; i++)for(let j = 0; j < newBoard[i].length; j++)newBoard[j][i] = this.board[i][j];\n        return newBoard;\n    }\n    _checkForGameOver() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return;\n        }\n        this.status = \"lose\";\n    }\n    move(direction) {\n        if (this.status === \"game over\") return false;\n        const oldBoard = JSON.stringify(this.board);\n        switch(direction){\n            case \"Up\":\n                this.board = this._transposeBoard();\n                this.board = this.board.map((row)=>this._processRow(row));\n                this.board = this._transposeBoard();\n                break;\n            case \"Down\":\n                this.board = this._transposeBoard();\n                this.board = this.board.map((row)=>{\n                    return this._processRow([\n                        ...row\n                    ].reverse()).reverse();\n                });\n                this.board = this._transposeBoard();\n                break;\n            case \"Left\":\n                this.board = this.board.map((row)=>this._processRow(row));\n                break;\n            case \"Right\":\n                this.board = this.board.map((row)=>{\n                    return this._processRow([\n                        ...row\n                    ].reverse()).reverse();\n                });\n                break;\n        }\n        const moved = JSON.stringify(this.board) !== oldBoard;\n        if (moved) {\n            this._spawnNewTile();\n            this._checkForGameOver();\n        }\n        return moved;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.restart();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.status = \"playing\";\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this._spawnNewTile();\n        this._spawnNewTile();\n    }\n}\n\n\n\"use strict\";\nconst $8fbb13ab0419a1b7$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $8fbb13ab0419a1b7$var$scoreElement = document.querySelector(\".game-score\");\nconst $8fbb13ab0419a1b7$var$button = document.querySelector(\".button\");\nconst $8fbb13ab0419a1b7$var$tableBody = document.querySelector(\"tbody\");\nconst $8fbb13ab0419a1b7$var$startMessage = document.querySelector(\".message-start\");\nconst $8fbb13ab0419a1b7$var$winMessage = document.querySelector(\".message-win\");\nconst $8fbb13ab0419a1b7$var$loseMessage = document.querySelector(\".message-lose\");\nconst $8fbb13ab0419a1b7$var$render = ()=>{\n    const board = $8fbb13ab0419a1b7$var$game.getState();\n    const score = $8fbb13ab0419a1b7$var$game.getScore();\n    const rows = $8fbb13ab0419a1b7$var$tableBody.querySelectorAll(\"tr\");\n    $8fbb13ab0419a1b7$var$scoreElement.textContent = score;\n    rows.forEach((row, rowIndex)=>{\n        row.querySelectorAll(\"td\").forEach((cell, colIndex)=>{\n            const value = board[rowIndex][colIndex];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = `field-cell field-cell--${value}`;\n        });\n    });\n};\nconst $8fbb13ab0419a1b7$var$updateUi = ()=>{\n    const gameStatus = $8fbb13ab0419a1b7$var$game.getStatus();\n    $8fbb13ab0419a1b7$var$startMessage.classList.toggle(\"hidden\", gameStatus !== \"idle\");\n    $8fbb13ab0419a1b7$var$winMessage.classList.toggle(\"hidden\", gameStatus !== \"win\");\n    $8fbb13ab0419a1b7$var$loseMessage.classList.toggle(\"hidden\", gameStatus !== \"lose\");\n    if (gameStatus === \"playing\") {\n        $8fbb13ab0419a1b7$var$button.textContent = \"Restart\";\n        $8fbb13ab0419a1b7$var$button.className = \"button restart\";\n    }\n};\nconst $8fbb13ab0419a1b7$var$handleMove = (direction)=>{\n    if ($8fbb13ab0419a1b7$var$game.getStatus() === \"lose\") return;\n    const moved = $8fbb13ab0419a1b7$var$game.move(direction);\n    if (moved) {\n        $8fbb13ab0419a1b7$var$render();\n        $8fbb13ab0419a1b7$var$updateUi();\n    }\n};\n$8fbb13ab0419a1b7$var$button.addEventListener(\"click\", ()=>{\n    $8fbb13ab0419a1b7$var$game.start();\n    $8fbb13ab0419a1b7$var$render();\n    $8fbb13ab0419a1b7$var$updateUi();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    let direction;\n    switch(e.key){\n        case \"ArrowUp\":\n            direction = \"Up\";\n            break;\n        case \"ArrowDown\":\n            direction = \"Down\";\n            break;\n        case \"ArrowLeft\":\n            direction = \"Left\";\n            break;\n        case \"ArrowRight\":\n            direction = \"Right\";\n            break;\n        default:\n            return;\n    }\n    e.preventDefault();\n    $8fbb13ab0419a1b7$var$handleMove(direction);\n});\nconst $8fbb13ab0419a1b7$var$continueButton = $8fbb13ab0419a1b7$var$winMessage.querySelector(\".keep-playing\");\n$8fbb13ab0419a1b7$var$continueButton.addEventListener(\"click\", ()=>{\n    $8fbb13ab0419a1b7$var$game.continuePlaying();\n    $8fbb13ab0419a1b7$var$winMessage.classList.add(\"hidden\");\n});\n// MOBILA\nlet $8fbb13ab0419a1b7$var$touchStartX = 0;\nlet $8fbb13ab0419a1b7$var$touchStartY = 0;\nconst $8fbb13ab0419a1b7$var$gameTable = document.querySelector(\".game-field\");\n$8fbb13ab0419a1b7$var$gameTable.addEventListener(\"touchstart\", (e)=>{\n    e.preventDefault();\n    $8fbb13ab0419a1b7$var$touchStartX = e.touches[0].clientX;\n    $8fbb13ab0419a1b7$var$touchStartY = e.touches[0].clientY;\n}, {\n    passive: false\n});\n$8fbb13ab0419a1b7$var$gameTable.addEventListener(\"touchend\", (e)=>{\n    e.preventDefault();\n    const touchEndX = e.changedTouches[0].clientX;\n    const touchEndY = e.changedTouches[0].clientY;\n    $8fbb13ab0419a1b7$var$handleSwipe(touchEndX, touchEndY);\n});\nfunction $8fbb13ab0419a1b7$var$handleSwipe(endX, endY) {\n    const deltaX = endX - $8fbb13ab0419a1b7$var$touchStartX;\n    const deltaY = endY - $8fbb13ab0419a1b7$var$touchStartY;\n    const swipeThreshold = 50;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > swipeThreshold) $8fbb13ab0419a1b7$var$handleMove(\"Right\");\n        else if (deltaX < -swipeThreshold) $8fbb13ab0419a1b7$var$handleMove(\"Left\");\n    } else {\n        if (deltaY > swipeThreshold) $8fbb13ab0419a1b7$var$handleMove(\"Down\");\n        else if (deltaY < -swipeThreshold) $8fbb13ab0419a1b7$var$handleMove(\"Up\");\n    }\n}\n\n\n//# sourceMappingURL=2048.4e8ec634.js.map\n","\"use strict\";\n\nimport Game from \"../modules/Game.class.js\";\n\nconst game = new Game();\n\nconst scoreElement = document.querySelector(\".game-score\");\nconst button = document.querySelector(\".button\");\nconst tableBody = document.querySelector(\"tbody\");\nconst startMessage = document.querySelector(\".message-start\");\nconst winMessage = document.querySelector(\".message-win\");\nconst loseMessage = document.querySelector(\".message-lose\");\n\nconst render = () => {\n  const board = game.getState();\n  const score = game.getScore();\n  const rows = tableBody.querySelectorAll(\"tr\");\n\n  scoreElement.textContent = score;\n\n  rows.forEach((row, rowIndex) => {\n    row.querySelectorAll(\"td\").forEach((cell, colIndex) => {\n      const value = board[rowIndex][colIndex];\n\n      cell.textContent = value === 0 ? \"\" : value;\n      cell.className = `field-cell field-cell--${value}`;\n    });\n  });\n};\n\nconst updateUi = () => {\n  const gameStatus = game.getStatus();\n\n  startMessage.classList.toggle(\"hidden\", gameStatus !== \"idle\");\n  winMessage.classList.toggle(\"hidden\", gameStatus !== \"win\");\n  loseMessage.classList.toggle(\"hidden\", gameStatus !== \"lose\");\n\n  if (gameStatus === \"playing\") {\n    button.textContent = \"Restart\";\n    button.className = \"button restart\";\n  }\n};\n\nconst handleMove = (direction) => {\n  if (game.getStatus() === \"lose\") {\n    return;\n  }\n\n  const moved = game.move(direction);\n\n  if (moved) {\n    render();\n    updateUi();\n  }\n};\n\nbutton.addEventListener(\"click\", () => {\n  game.start();\n  render();\n  updateUi();\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  let direction;\n\n  switch (e.key) {\n    case \"ArrowUp\":\n      direction = \"Up\";\n      break;\n    case \"ArrowDown\":\n      direction = \"Down\";\n      break;\n    case \"ArrowLeft\":\n      direction = \"Left\";\n      break;\n    case \"ArrowRight\":\n      direction = \"Right\";\n      break;\n    default:\n      return;\n  }\n\n  e.preventDefault();\n\n  handleMove(direction);\n});\n\nconst continueButton = winMessage.querySelector(\".keep-playing\");\n\ncontinueButton.addEventListener(\"click\", () => {\n  game.continuePlaying();\n  winMessage.classList.add(\"hidden\");\n});\n\n// MOBILA\n\nlet touchStartX = 0;\nlet touchStartY = 0;\nconst gameTable = document.querySelector(\".game-field\");\n\ngameTable.addEventListener(\n  \"touchstart\",\n  (e) => {\n    e.preventDefault();\n    touchStartX = e.touches[0].clientX;\n    touchStartY = e.touches[0].clientY;\n  },\n  { passive: false },\n);\n\ngameTable.addEventListener(\"touchend\", (e) => {\n  e.preventDefault();\n\n  const touchEndX = e.changedTouches[0].clientX;\n  const touchEndY = e.changedTouches[0].clientY;\n\n  handleSwipe(touchEndX, touchEndY);\n});\n\nfunction handleSwipe(endX, endY) {\n  const deltaX = endX - touchStartX;\n  const deltaY = endY - touchStartY;\n  const swipeThreshold = 50;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > swipeThreshold) {\n      handleMove(\"Right\");\n    } else if (deltaX < -swipeThreshold) {\n      handleMove(\"Left\");\n    }\n  } else {\n    if (deltaY > swipeThreshold) {\n      handleMove(\"Down\");\n    } else if (deltaY < -swipeThreshold) {\n      handleMove(\"Up\");\n    }\n  }\n}\n","\"use strict\";\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nexport default class Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.score = 0;\n    this.status = \"idle\"; // One of: 'idle', 'playing', 'win', 'lose'\n\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  _spawnNewTile() {\n    const zeroPos = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          zeroPos.push({ rowIndex: row, colIndex: col });\n        }\n      }\n    }\n\n    if (zeroPos.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * zeroPos.length);\n\n    const randomCell = zeroPos[randomIndex];\n    const startValue = Math.random() < 0.1 ? 4 : 2;\n\n    this.board[randomCell.rowIndex][randomCell.colIndex] = startValue;\n  }\n\n  _processRow(row) {\n    const slidRow = row.filter((cell) => cell !== 0);\n    const mergedRow = [];\n\n    for (let i = 0; i < slidRow.length; i++) {\n      if (i + 1 < slidRow.length && slidRow[i] === slidRow[i + 1]) {\n        const mergedValue = slidRow[i] * 2;\n\n        if (mergedValue === 2048) {\n          this.status = \"win\";\n        }\n\n        mergedRow.push(mergedValue);\n        this.score += mergedValue;\n\n        i++;\n      } else {\n        mergedRow.push(slidRow[i]);\n      }\n    }\n\n    while (mergedRow.length < 4) {\n      mergedRow.push(0);\n    }\n\n    return mergedRow;\n  }\n\n  _transposeBoard() {\n    const newBoard = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    for (let i = 0; i < newBoard.length; i++) {\n      for (let j = 0; j < newBoard[i].length; j++) {\n        newBoard[j][i] = this.board[i][j];\n      }\n    }\n\n    return newBoard;\n  }\n\n  _checkForGameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n      }\n    }\n    this.status = \"lose\";\n  }\n\n  move(direction) {\n    if (this.status === \"game over\") {\n      return false;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    switch (direction) {\n      case \"Up\":\n        this.board = this._transposeBoard();\n        this.board = this.board.map((row) => this._processRow(row));\n        this.board = this._transposeBoard();\n        break;\n      case \"Down\":\n        this.board = this._transposeBoard();\n\n        this.board = this.board.map((row) => {\n          return this._processRow([...row].reverse()).reverse();\n        });\n\n        this.board = this._transposeBoard();\n        break;\n      case \"Left\":\n        this.board = this.board.map((row) => this._processRow(row));\n        break;\n      case \"Right\":\n        this.board = this.board.map((row) => {\n          return this._processRow([...row].reverse()).reverse();\n        });\n        break;\n    }\n\n    const moved = JSON.stringify(this.board) !== oldBoard;\n\n    if (moved) {\n      this._spawnNewTile();\n      this._checkForGameOver();\n    }\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.restart();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.status = \"playing\";\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this._spawnNewTile();\n    this._spawnNewTile();\n  }\n}\n"],"names":["$8fbb13ab0419a1b7$var$game","initialState","score","status","board","_spawnNewTile","zeroPos","row","length","col","push","rowIndex","colIndex","randomIndex","Math","floor","random","randomCell","startValue","_processRow","slidRow","filter","cell","mergedRow","i","mergedValue","_transposeBoard","newBoard","j","_checkForGameOver","move","direction","oldBoard","JSON","stringify","map","reverse","moved","getScore","getState","getStatus","start","restart","$8fbb13ab0419a1b7$var$scoreElement","document","querySelector","$8fbb13ab0419a1b7$var$button","$8fbb13ab0419a1b7$var$tableBody","$8fbb13ab0419a1b7$var$startMessage","$8fbb13ab0419a1b7$var$winMessage","$8fbb13ab0419a1b7$var$loseMessage","$8fbb13ab0419a1b7$var$render","rows","querySelectorAll","textContent","forEach","value","className","$8fbb13ab0419a1b7$var$updateUi","gameStatus","classList","toggle","$8fbb13ab0419a1b7$var$handleMove","addEventListener","e","key","preventDefault","$8fbb13ab0419a1b7$var$continueButton","continuePlaying","add","$8fbb13ab0419a1b7$var$touchStartX","$8fbb13ab0419a1b7$var$touchStartY","$8fbb13ab0419a1b7$var$gameTable","touches","clientX","clientY","passive","endX","changedTouches","endY","deltaX","deltaY","abs"],"version":3,"file":"2048.4e8ec634.js.map"}